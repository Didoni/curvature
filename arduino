#include <Servo.h>
#include <DSSerial.h>

#define MINANGLE 1250
#define MAXANGLE 1750

#define N_SERVOS 8
#define PACKED_SIZE 9

int servoPin[N_SERVOS] = {2,3,5,4,7,6,12,13};
Servo myServo[N_SERVOS];
int oldDegree[N_SERVOS];
int degree[N_SERVOS];

byte buff[PACKED_SIZE];

DSSerial serial = DSSerial();

void setup()
{
  for(int i = 0; i < N_SERVOS; ++i){
    myServo[i].attach(servoPin[i],600,2400);
  }  
 
  Serial.begin(115200);
  
  for (int i=0;i<8; i++){
    degree[i] = 0;
    oldDegree[i] = 0;
  }
  delay(30); 
}

void writetoServo(int number) {
  if(oldDegree[number] != degree[number] && degree[number] < MAXANGLE && degree[number] > MINANGLE){
          oldDegree[number] = degree[number];
          myServo[number].writeMicroseconds(degree[number]);
   }
}

void readServosNormal(){
      for(int i = 0; i < N_SERVOS; ++i){
        degree[i]= serial.readInt();
      }
}

void read4ServosPacked(){
  Serial.readBytes(buff, PACKED_SIZE);
  
  for(int i = 0; i < N_SERVOS; ++i){
        degree[i] = buff[i];
        degree[i] += MINANGLE;
  }
  unsigned char significantBits = buff[PACKED_SIZE-1];
  for(int i = 0; i < N_SERVOS; ++i){
    degree[i] += (significantBits & (1<<i)) ? 256 : 0; //more efficient with bit operators instead of ? but this way is endianess independent
  }
   
}


void loop() 
{

  
  if (Serial.available()) {
    

    int key = Serial.read(); 
    if (key == 255) {
      
      //readServosNormal();
      read4ServosPacked();
      
      for(int i = 0; i < N_SERVOS; ++i){
        writetoServo(i);
      }

      
     }
     
  }
}
